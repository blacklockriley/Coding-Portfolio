     1                                 %line 1+1 input.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 
    22                                 
    23                                 
    24                                 [section .data]
    25 00000000 496E7075742061206E-    msg1 db "Input a number (1~9): ", 0
    26 00000000 756D6265722028317E-
    27 00000000 39293A2000         
    28 00000017 2069732061204D756C-    msg2 db " is a Multiple of 3.", 0
    29 00000017 7469706C65206F6620-
    30 00000017 332E00             
    31 0000002C 0A00                   newline db 10, 0
    32                                 
    33                                 [section .bss]
    34 00000000 <gap>                  buffer resb 2
    35 00000002 <gap>                  ascii resb 10
    36                                 
    37                                 [section .text]
    38                                 [global _start]
    39                                 
    40                                 _start:
    41                                 
    42 00000000 4D31D2                  xor r10, r10
    43                                 
    44                                 input_loop:
    45                                 
    46 00000003 48C7C001000000          mov rax, 1
    47 0000000A 48C7C701000000          mov rdi, 1
    48 00000011 48C7C6[00000000]        mov rsi, msg1
    49 00000018 48C7C217000000          mov rdx, 23
    50 0000001F 0F05                    syscall
    51                                 
    52                                 
    53 00000021 48C7C000000000          mov rax, 0
    54 00000028 48C7C700000000          mov rdi, 0
    55 0000002F 48C7C6[00000000]        mov rsi, buffer
    56 00000036 48C7C202000000          mov rdx, 2
    57 0000003D 0F05                    syscall
    58                                 
    59                                 
    60 0000003F 8A0425[00000000]        mov al, [buffer]
    61 00000046 418882[00000000]        mov [ascii + r10], al
    62                                 
    63                                 
    64 0000004D 49FFC2                  inc r10
    65                                 
    66                                 
    67 00000050 4983FA09                cmp r10, 9
    68 00000054 7CAB                    jl input_loop
    69                                 
    70                                 
    71 00000056 4D31D2                  xor r10, r10
    72                                 
    73                                 check_loop:
    74                                 
    75 00000059 490FB682[00000000]      movzx rax, byte [ascii + r10]
    76                                 
    77                                 
    78 00000061 4883E830                sub rax, '0'
    79                                 
    80                                 
    81 00000065 4831D2                  xor rdx, rdx
    82 00000068 48C7C303000000          mov rbx, 3
    83 0000006F 48F7F3                  div rbx
    84 00000072 4883FA00                cmp rdx, 0
    85 00000076 7558                    jne not_multiple
    86                                 
    87                                 
    88 00000078 48C7C001000000          mov rax, 1
    89 0000007F 48C7C701000000          mov rdi, 1
    90 00000086 498DB2[00000000]        lea rsi, [ascii + r10]
    91 0000008D 48C7C201000000          mov rdx, 1
    92 00000094 0F05                    syscall
    93                                 
    94                                 
    95 00000096 48C7C001000000          mov rax, 1
    96 0000009D 48C7C701000000          mov rdi, 1
    97 000000A4 48C7C6[00000000]        mov rsi, msg2
    98 000000AB 48C7C215000000          mov rdx, 21
    99 000000B2 0F05                    syscall
   100                                 
   101                                 
   102 000000B4 48C7C001000000          mov rax, 1
   103 000000BB 48C7C701000000          mov rdi, 1
   104 000000C2 48C7C6[00000000]        mov rsi, newline
   105 000000C9 48C7C201000000          mov rdx, 1
   106 000000D0 0F05                    syscall
   107                                 
   108                                 not_multiple:
   109                                 
   110 000000D2 49FFC2                  inc r10
   111                                 
   112                                 
   113 000000D5 4983FA09                cmp r10, 9
   114 000000D9 0F8C74FFFFFF            jl check_loop
   115                                 
   116                                 
   117 000000DF 48C7C03C000000          mov rax, 60
   118 000000E6 4831FF                  xor rdi, rdi
   119 000000E9 0F05                    syscall
